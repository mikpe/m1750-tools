POSIX Threads
=============

This is the pre-emptive version of POSIX Threads for GCC-1750. It is
basd on code from Florida State University, and has been customized
for a bare-board MIL-STD-1750, running in regular 64K addressing mode
or in expanded memory address mode.

It support interrupts such as the level1 and level2 peripheral interrupts
and supports timing using the 1750's timer A. This is used to interrupt
100 times per second, and any thread waiting on a timed condition or
in a sleep statement will awake on a timer A interrupt. Timer B is available
for applciation program use.

It supports priority scheduling, with a priority range from zero (which
is the lowest priority) to 100. The default priority is 0.

Apart form the need to call pthread_init, the subset provided here is 100%
compatible with POSIX Threads as implemented by Sun Microsystems on 
Solaris 2.5.1. Therefore threaded applications may be tested on Solaris.
Note that threaded applications may also be tested on the 1750 simulator
provided with GDB-1750.

The features provided here are:

	Thread creation, destruction, join and detach
	Mutex lock, unlock etc
	Cond wait, signal etc
	Sleep, nanosleep
	Intwait

Rather than support POSIX signals, which have far more functionality than
we need on the 1750, we decided to offer an interrupt handling package that
offers a subset of POSIX signals, but generally using the prefix INT
in place of SIG. We also support ANSI C signals, quite independently
of the use of threads, and these signals do not interact with threads
at all.

The POSIX Threads standard is available by mail from the IEEE at 
http://stdsbbs.ieee.org/.

CREDITS
=======

GCC-1750 Threads is based on code from Florida State University.

Most of this code was produced by FSU students and faculty under the
POSIX/Ada Real-Time (PART) project, funded by the Ada Joint Program
Office under the Ada Technology Insertion Program, through the U.S.
Army Communications Electronics Command, Software Engineering
Directorate, subcontracted through the Telos Corporation.

PART project members have included Ted Baker (Principal Investigator),
Ted Giering (Chief Programmer), Pratit Santiprabhob (Research
Associate), Offer Pazy (Consultant), and Ganesh Rangarajan, R. Ramesh,
Frank Mueller, Teguh Ghazalie, Viresh Rustagi, Seung-jin Moon, Dong-Ik
Oh, and Ashwin Goyal (Graduate Research Assistants).

This software is still under development, and contains known bugs.
The user assumes all risks associated with its use.

This subdirectory contains a library implementation of the POSIX
1003.4a/D6 draft standard for multiple threads of control within POSIX
processes, known for short as Pthreads.  
This was originally based on the C threads library of Eric
Cooper [1].  This library was modified to support Pthreads syntax and
non-preemptive priority scheduling on the Motorola MC680x0 family of
processors by Ganesh Rangarajan [2].  R. Ramesh and Ted Giering ported
this library to the SPARC processor, and R. Ramesh merged the two
levels of scheduling entities provided by C threads into one and added
further Pthreads features.  Frank Mueller modified the resulting
library to support preemptive scheduling, per-thread signals, and
other features.  Viresh Rustagi implemented single-thread blocking I/O
and refined the context switch.  Details of the design and
implementation can be found in the literature [3,4].

References
==========

[1] E. Cooper and R. Draves. C Threads. Technical Report CMU-CS-88-154,
        Department of Computer Science, Carnegie Mellon University,
        1988.

[2] Ganesh Rangarajan. A Library Implementation of POSIX Threads. July
        1991.  Master's Project Report, Florida State University
        Department of Computer Science.

[3] Frank Mueller. Implementing POSIX Threads under UNIX:
        Description of Work in Progress. In Proceedings of the 
        Second Software Engineering Research Forum, November 1992.
        p. 253-261.

[4] Frank Mueller. A Library Implementation of POSIX Threads under
        UNIX. In Proceedings of the USENIX Conference, Winter 1993.
        p. 29-41.

[5] T. P. Baker, F. Mueller and Viresh Rustagi. Experience with a
        Prototype of the POSIX ``Minimal Realtime System Profile''.
        In Proceedings of the 11th IEEE Workshop on Real-Time Operating
        Systems and Software, May 1994.

