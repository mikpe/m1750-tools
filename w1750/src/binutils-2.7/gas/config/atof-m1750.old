/* atof_m1750.c - turn a Flonum into a 1750 floating point number
   Copyright (C) 1987, 1992 Free Software Foundation, Inc.

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "as.h"

extern FLONUM_TYPE generic_floating_point_number;	/* Flonums returned here. */

#ifndef NULL
#define NULL (0)
#endif

extern const char EXP_CHARS[];

/* Precision in LittleNums. */
#define MAX_PRECISION (3)
#define F_PRECISION (2)
#define D_PRECISION (3)

/* Length in LittleNums of guard bits. */
#define GUARD (2)

static const unsigned long mask[] =
{
  0x00000000,
  0x00000001,
  0x00000003,
  0x00000007,
  0x0000000f,
  0x0000001f,
  0x0000003f,
  0x0000007f,
  0x000000ff,
  0x000001ff,
  0x000003ff,
  0x000007ff,
  0x00000fff,
  0x00001fff,
  0x00003fff,
  0x00007fff,
  0x0000ffff,
  0x0001ffff,
  0x0003ffff,
  0x0007ffff,
  0x000fffff,
  0x001fffff,
  0x003fffff,
  0x007fffff,
  0x00ffffff,
  0x01ffffff,
  0x03ffffff,
  0x07ffffff,
  0x0fffffff,
  0x1fffffff,
  0x3fffffff,
  0x7fffffff,
  0xffffffff,
};


static int bits_left_in_littlenum;
static int littlenums_left;
static LITTLENUM_TYPE *littlenum_pointer;

static int
next_bits (number_of_bits)
     int number_of_bits;
{
  int return_value;

  if (!littlenums_left)
    return (0);
  if (number_of_bits >= bits_left_in_littlenum)
    {
      return_value = mask[bits_left_in_littlenum] & *littlenum_pointer;
      number_of_bits -= bits_left_in_littlenum;
      return_value <<= number_of_bits;

      if (--littlenums_left)
	{
	  bits_left_in_littlenum = LITTLENUM_NUMBER_OF_BITS - number_of_bits;
	  --littlenum_pointer;
	  return_value |= (*littlenum_pointer >> bits_left_in_littlenum) & mask[number_of_bits];
	}
    }
  else
    {
      bits_left_in_littlenum -= number_of_bits;
      return_value = mask[number_of_bits] & (*littlenum_pointer >> bits_left_in_littlenum);
    }
  return (return_value);
}

static void
make_invalid_floating_point_number (words)
     LITTLENUM_TYPE *words;
{
  as_bad ("cannot create floating-point number");
  words[0] = 0x0000;
  words[1] = 0x0100;     /* i.e. not normalized */
  words[2] = 0x0000; 
}


/* Returns pointer past text consumed. */
char *
atof_m1750 (str, what_kind, words)
     char *str;			/* Text to convert to binary. */
     char what_kind;		/* 's', 'd', 'f', */
     LITTLENUM_TYPE *words;	/* Build the binary here. */
{
  /* Extra bits for zeroed low-order bits.  The 1st MAX_PRECISION are
     zeroed, the last contain flonum bits. */
  static LITTLENUM_TYPE bits[MAX_PRECISION + MAX_PRECISION + GUARD];
  char *return_value;
  /* Number of 16-bit words in the format. */
  int precision;
  long exponent_bits;
  FLONUM_TYPE save_gen_flonum;

  /* We have to save the generic_floating_point_number because it
     contains storage allocation about the array of LITTLENUMs where
     the value is actually stored.  We will allocate our own array of
     littlenums below, but have to restore the global one on exit.  */
  save_gen_flonum = generic_floating_point_number;

  return_value = str;
  generic_floating_point_number.low = bits + MAX_PRECISION;
  generic_floating_point_number.high = NULL;
  generic_floating_point_number.leader = NULL;
  generic_floating_point_number.exponent = 0;
  generic_floating_point_number.sign = '\0';

  /* Use more LittleNums than seems necessary: the highest flonum may
     have 15 leading 0 bits, so could be useless. */

  memset (bits, '\0', sizeof (LITTLENUM_TYPE) * MAX_PRECISION);

  switch (what_kind)
    {
    case 'f':
    case 'F':
    case 's':
    case 'S':
      precision = F_PRECISION;
      exponent_bits = 8;
      break;

    case 'd':
    case 'D':
    case 'r':
    case 'R':
      precision = D_PRECISION;
      exponent_bits = 8;
      break;

    default:
      make_invalid_floating_point_number (words);
      return (NULL);
    }

  generic_floating_point_number.high
    = generic_floating_point_number.low + precision - 1 + GUARD;

  if (atof_generic (&return_value, ".", EXP_CHARS,
		    &generic_floating_point_number))
    {
      make_invalid_floating_point_number (words);
      return (NULL);
    }
  gen_to_words (words, precision, exponent_bits);

  /* Restore the generic_floating_point_number's storage alloc (and
     everything else).  */
  generic_floating_point_number = save_gen_flonum;

  return return_value;
}

/* Turn generic_floating_point_number into a real float/double  */
int
gen_to_words (words, precision, exponent_bits)
     LITTLENUM_TYPE *words;
     int precision;
     long exponent_bits;
{
  int return_value = 0;

  long exponent_1;
  long exponent_2;
  long exponent_3;
  long exponent_4;
  int exponent_skippage;
  LITTLENUM_TYPE word1, word2, word3;
  LITTLENUM_TYPE *lp;
  LITTLENUM_TYPE *words_end = words + precision;

  if (generic_floating_point_number.low > generic_floating_point_number.leader)
    {
      /* 0.0e0: */
      if (precision == F_PRECISION)
	{
	  words[0] = 0x0000;
	  words[1] = 0x0000;
	}
      else
	{
	  words[0] = 0x0000;
	  words[1] = 0x0000;
	  words[2] = 0x0000;
	}
      return (return_value);
    }

  if (generic_floating_point_number.sign == 0)
    {
      /* NaN:  Not on 1750, so return the smallest +ve number */
      if (precision == F_PRECISION)
	{
	  words[0] = 0x7fff;
	  words[1] = 0xff80;
	}
      else
	{
	  words[0] = 0x7fff;
	  words[1] = 0xff80;
	  words[2] = 0xffff;
	}
      return return_value;
    }

  if (generic_floating_point_number.sign == 'P')
    {
      /* Positive infinity: Return largest +ve number */
      if (precision == F_PRECISION)
	{
	  words[0] = 0x7fff;
	  words[1] = 0xff7f;
	}
      else
	{
	  words[0] = 0x7fff;
	  words[1] = 0xff7f;
	  words[2] = 0xffff;
	}
      return (return_value);
    }

  if (generic_floating_point_number.sign == 'N')
    {
      /* Negative infinity: Return the largest -ve number */
      if (precision == F_PRECISION)
	{
	  words[0] = 0x8000;
	  words[1] = 0x007f;
	}
      else
	{
	  words[0] = 0x8000;
	  words[1] = 0x007f;
	  words[2] = 0x0000;
	}
      return (return_value);
    }

  /*
   * The floating point formats we support have:
   * Bits 0 .. 23 are the signed (2's complement) mantissa
   * Bits 24 .. 31 are the signed (2's complement) exponent
   * For double precision, bits 32 .. 47 are the mantissa extension
   */

  /* Set up globals stuff used by next_bits and friends */
  bits_left_in_littlenum = LITTLENUM_NUMBER_OF_BITS;
  littlenum_pointer = generic_floating_point_number.leader;
  littlenums_left = (1
		     + generic_floating_point_number.leader
		     - generic_floating_point_number.low);

  /* Seek 1st significant bit */
  for (exponent_skippage = 0; !next_bits (1); ++exponent_skippage)
    ;

  /* Calculate exponent, Radix LITTLENUM_RADIX */
  exponent_1 = (generic_floating_point_number.exponent
		+ generic_floating_point_number.leader
		+ 1
		- generic_floating_point_number.low);

  /* Convert exponent to radix 2 */
  exponent_2 = exponent_1 * LITTLENUM_NUMBER_OF_BITS;

  /* Forget leading zeros */
  exponent_3 = exponent_2 - exponent_skippage;


  /* Already got ms bit (it's a 1) */
  word1 = 0x4000;

  /* Get next 14 bits of mantissa */
  word1 |= next_bits (14);

  /* Get next 8 bits and exponent */
  word2 = next_bits (8);

  /* Get next 16 for double precision case */
  word3 = next_bits (16);

  /* Negate if sign -ve */
  if (generic_floating_point_number.sign == '-')
    {
      if (word1 == 0x4000 && word2 == 0 && word3 == 0)
        {
          word1 = 0x8000;
          exponent_3--;
        }
      else
        {
        }
    }

  if (exponent_3 < -128)
    {
      /* Underflow: Return zero */
      if (precision == F_PRECISION)
        {
          words[0] = 0x0000;
          words[1] = 0x0000;
        }
      else
        {
          words[0] = 0x0000;
          words[1] = 0x0000;
          words[2] = 0x0000;
        }
      return (return_value);
    }

  if (exponent_3 > 127)
    {
      /* Overflow: Return largest +ve number */
      if (precision == F_PRECISION)
        {
          words[0] = 0x7fff;
          words[1] = 0xff7f;
        }
      else
        {
          words[0] = 0x7fff;
          words[1] = 0xff7f;
          words[2] = 0xffff;
        }
      return (return_value);
    }

  /* Write it away */
  words[0] = word1;
  words[1] = word2 << 8 | (exponent_3 & 0xff);
  if (precision != F_PRECISION)
    {
      words[3] = word3;
    }

  return (return_value);
}


char *
md_atof (type, litP, sizeP)
     char type;
     char *litP;
     int *sizeP;
{
  /* 
   * Turn a string in input_line_pointer into a floating point constant of type
   * type, and store the appropriate bytes in *litP.  The number of LITTLENUMS
   * emitted is stored in *sizeP. An error message is returned, or NULL on OK.
   */
  int prec;
  LITTLENUM_TYPE words [MAX_PRECISION];
  LITTLENUM_TYPE *wordP;
  char *t;

  switch (type)
    {
    case 'f':
    case 'F':
    case 's':
    case 'S':
      prec = 2;
      break;

    case 'd':
    case 'D':
      prec = 3;
      break;

    default:
      *sizeP = 0;
      return "Bad call to MD_NTOF()";
    }

  t = atof_m1750 (input_line_pointer, type, words);
  if (t)
    input_line_pointer = t;

  *sizeP = prec * sizeof (LITTLENUM_TYPE);
  for (wordP = words; prec-- > 0; wordP++)
    {
      md_number_to_chars (litP, (valueT) (*wordP), sizeof (LITTLENUM_TYPE));
      litP += sizeof (LITTLENUM_TYPE);
    }
  return 0;
}


